
属性集：
    java.utils.Properties extends HashTable<k ,v> implement Map<k, v>
    Properties类是个持久的属性集，Properties可以从流中读入或者保存在流中
    Properties是唯一和IO流相结合的集合
        可以使用Properties集合中的方法store，可以将集合中的数据持久化写入到硬盘中存储
            void store(OutputStream out, String comments)
            void store(Write write, String comments)
            参数：
                若传入的是OutputStream字节输出流，那么就不能写入中文
                若传入的是Write字符输出流，可以写中文
                String comments 注释，解释说明该文件的用途，但是不可以使用中文，系统默认是unicode编码，一般使用的是空字符串
            使用步骤：
                1、创建一个Properties集合对象，添加数据
                2、创建字节/字符输出流对象，在构造方法中绑定要输出的目的地
                3、使用集合中的方法store，将集合中数据持久化写入硬盘中存储
                4、释放资源
        可以使用Properties集合中的方法load，将硬盘中保存的文件(键值对)，读取到集合中使用
            void load(InputStream inStream)
            void load(Reader, reader)
            参数：
                InputStream inStream：字节输入流，不可以读取含有中文的键值对
                Reader, reader 字符输入流，可以读取含有中文的键值对
            使用步骤：
                1、创建Properties集合对象
                2、使用集合对象中的方法load读取保存键值对的文件
                3、遍历Properties，查看是否已经将数据读出
            注意事项：
                1、存储键值对的文件中，键值对的连接符号可以默认使用,=,空格或者吉他符号
                2、存储键值对的文件中，可以使用警号进行注释，被注释的键值对不会再被读取
                3、存储键值对的文件中，默认都是字符串，不需要再增加引号
        属性列表中的每一个值都是一个字符串
        Properties集合是一个双列集合，key和value默认都是字符串
    常用方法：
        String getProperty(String key)  通过给定的键来获取值 相当于Map集合中的get方法
        set<String> stringPropertyNames() 返回此属性列表中的键集，其中该键极其对应的值就是字符串

缓冲流：
    相当于对基本的流进行了增强
    字节缓冲输入流(BuffedInputStream)：给基本的字节输入流增加一个缓冲区，加强基本输入流的执行效率
    BuffedInputStream(new FileInputSteam())
    java.io.BuffedOutputStream extends OutputStream
    BufferedOutputStream:字节缓冲输出流
    继承自父类的成员方法：
        public void close()  关闭此输出，且释放一切与之相关的任何系统资源
        public void flush()  刷新输出流，并强制任何缓冲区的输出字节写出
        public void write(byte[] b) 将b.length字节从指定字节数组写入该输出流
        public void write(byte[] b, int off, int len) 将指定的字节数组进行写入len字节，从偏移量off开始输出到此输出流
    构造方法：
        BuffedOutputStream(OutputStream out) 创建一个新的缓冲输出流，将数据写入指定的底层输出流
        BuffedOutputStream(OutputStream out, int size) 创建一个新的缓冲输出流，将指定缓冲区大小的数据写入底层输出流
        参数：
            OutputStream out 字节输出流
            可传递FileOutputStream,缓冲流会给FileOutputStream增加缓冲区，提高FileOutputStream的写入效率
            int size:指定内部缓冲区大小，若不指定，那就使用默认大小
    使用步骤：
        1、创建一个字节输出流FileOutputStream对象中绑定要输出的目的地
        2、创建BuffedOutStream对象，构造方法中传递字节输出流对象
        3、使用BuffedOutStream对象中的方法write，将数据写入内部缓冲区中
        4、使用BuffedOutStream对象中的方法flush，将内部缓冲区中的数据刷新到文件中
        5、释放资源(先调用flush方法刷新数据，所以第四步是可以省略的)
    BufferedOutputStream(字节缓冲输入流)
    继承自父类的成员方法：
        int read() 读取单个字符并返回
        int reader(char[], cbuf) 一次读取多个字符，将字符放置在数组中
    构造方法：
        BuffedInputStream(OutputStream in)
        BuffedInputStream(OutputStream in，int size)
        参数：
            OutputStream in 字节输入流
            传入FileInputStream，缓冲流会给FileInputStream增加一个缓冲区
            int size:指定内部缓冲区大小，若不指定，那就使用默认大小
    使用步骤：
        1、创建一个FileInputStream对象，构造方法中绑定读取的数据源
        2、创建一个BufferedInputStream对象，构造方法中传递FileInputStream对象，提高BuffedInputStream对象的读取效率
        3、使用BuffedInputStream对象中的方法read读取文件
        4、释放资源

转换流：
    字符编码和字符集
    编码引出的问题，使用FileReader读取的就是系统默认编码GBK，就会产生乱码
    转换流的原理：
        GBK(中文码表)使用两个字节表示一个中文
        UTF-8国际标准编码表，使用三个字节表示一个中文

    java.io.OutputStreamWriter extends Writer
    OutputStreamWriter是字符流到字节流的桥梁，可使用指定的charset将写入流中数据编码为字节。(编码：将能看懂的编程看不懂的)
    继承自父类的共性成员方法：
        void write() 写入单个字符
        void write(char[] cbuf)写入字符数组
        abstract void write(char cbuf, int off, int len) 写入字符数组的某一部分，off指的是字符数组开始的索引，len写入字符的个数
        void write(String str) 写入字符串
        void write(String str, int off, int len) 写入字符串的某一个部分
        void flush() 刷新该流的缓冲
        void close() 关闭流，释放资源，先刷新它
    构造方法：
        OutputStreamWriter(OutStream out) 使用默认编码的OutputStreamWriter
        OutputStreamWriter(OutStream out, String charsetName)  使用指定编码的OutputStreamWriter
        参数：
            OutStream out 字节输出流，可以写转换之后的字节到文件中
            String charsetName 编码表名称，不区分大小写，可以使utf-8 也可以是UTF-8，不指定则默认使用UTF-8
    使用步骤：
        1、创建一个OutputStreamWriter对象，它的构造方法中传递字节输出流和指定的编码表名称
        2、使用OutputStreamWriter对象中的方法write，将字符转换为字节存储到缓冲区中
        3、使用OutputStreamWriter对象中的方法flush，将内存缓冲区中的字节刷新到文件中(使用字节流写字节的过程)
        4、释放资源

    java.io.InputStreamReader extends Reader
    InputStreamReader是字节流通向字符流的桥梁，他使用指定的charset读取字节并将其解码为字符(将看不懂的变能看懂的)
    继承了父类的成员方法：
        int read() 读取单个字符并返回
        int reader(char[], cbuf) 一次读取多个字符，将字符放置在数组中
        void close() 释放资源
    构造方法：
        InputStreamReader(InputStream in) 使用默认编码的InputStreamReader
        InputStreamReader(InputStream in, String charsetName) 使用指定编码的InputStreamReader
        参数：
            InputStream in 字节输入流，用来读取文件中保存的字节
            String charsetName 编码表名称，不区分大小写，可以使utf-8 也可以是UTF-8，不指定则默认使用UTF-8
    使用步骤：
        1、创建一个InputStreamReader对象，构造方法中传递字节输入流和指定的字节编码表名称
        2、使用InputStreamReader对象中的方法read读取文件
        3、释放资源
    注意事项：
        构造方法中指定的编码表，要与读取文件的编码方式相同，否则会发生乱码

序列化：
    将对象以流的方式写入到文件中保存，叫写对象，也叫作对象的序列化
    将文件中保存的对象，以流的方式读取出来，叫做读对象，也叫作反序列化

    序列化流：
        java.io.ObjectOutputStream extends OutputStream
        ObjectOutputStream:对象的序列化流
        作用：将对象以流的方式写入到文件中保存
        构造方法：
            ObjectOutputStream(OutStream out) 创建写入指定的OutputStream的ObjectOutputStream
            参数：
                OutStream out：字节输出流
            特有的成员方法：
                void WriteObject(Object obj) 将指定的对象写入ObjectOutputStream
        使用步骤：
            1、创建一个ObjectOutputStream对象，构造方法中传递字节输出流
            2、使用ObjectOutputStream对象中的方法writeObject将对象写入到文件中
            3、资源释放

    反序列化流：
        java.io.ObjectInputStream extends InputStream
        ObjectInputStream:对象的反序列化类
        作用：将文件中的对象以流的方式读取出来使用
        构造方法：
            ObjectInputStream(InputStream in)
            参数：
                InputStream in 字节输入流
            特有的成员方法：
                Object readObject() 读取对象
        使用步骤：
            1、创建一个ObjectInputStream对象，构造方法中传递字节输入流
            2、使用ObjectInputStream对象的方法readObject方法，读取保存对象的文件
            3、释放资源
            4、使用读取出来的对象，可以直接打印

    static关键字：静态关键字；静态优先于非静态加载到内存中(静态优先于对象进入到内存中)，经过static关键字修饰过的对象是不可以被序列化的
                 静态不属于对象，他只是被所有对象所共享
    transient关键字，即为瞬态关键字，被transient关键字修饰的对象，也是不能被序列化的，若不想某个成员变量被序列化，就可以使用transient来修饰
    反序列化操作：
        当JVM反序列化对象时，序列化的文件可以找到Class文件，但是Class文件在序列化对象之后发生了修改，抛出一个InvalidClassException

    打印流：
        java.io.PrintStream:打印流
        PrintStream为其他输出流添加了一些功能，使他们能够方便地打印各种数值的形式
        特点：
            1、只负责数据的输出，不负责数据的读取
            2、PrintStream永远不会抛出IOException
            3、有特有的方法，
                void print() 打印任意类型的数据
                void println() 打印任意类型的数据，并执行自动换行
        构造方法：
            PrintStream(File file) 输出目的地是一个文件
            PrintStream(OutputStream out) 输出的目的地是一个字节流
            PrintStream(String filename) 输出的目的地是一个路径
        PrintStream extends OutputStream
        继承自父类的成员方法：
            public void close()  关闭此输出，且释放一切与之相关的任何系统资源
            public void flush()  刷新输出流，并强制任何缓冲区的输出字节写出
            public void write(byte[] b) 将b.length字节从指定字节数组写入该输出流
            public void write(byte[] b, int off, int len) 将指定的字节数组进行写入len字节，从偏移量off开始输出到此输出流
        注意事项：
            若使用继承自父类的Write方法写数据，若查看数据的时候，会查询编码表
            若使用自己特有的方法写数据，写的数据原样输出










