方法：
    方法的定义格式：
        修饰符 返回值类型 方法名称(参数类型 参数名){
                    方法体;
                    return 返回值;
        }
        return 的两个作用：
            1、停止当前方法
            2、返回值还给调用处，也就是返回值类型处对应的数据

方法的三种调用格式：
    1、单独调用：方法名称(参数);
    2、打印调用：System.out.println(方法名称(参数))
    3、赋值调用：数据类型 变量名称 = 方法名称(参数)
    注意：返回值类型为空的方法，不可以进行后两种调用格式

方法有无返回值的区别：
    1、若方法计算结果需要在其他地方进行使用，则需要方法由返回值
    2、若方法计算结果打印出来即可，那么不需要返回值

方法的注意事项：
    1、方法应当定义在类当中，不可以在方法中再定义方法，不能嵌套
    2、方法定义的前后顺序无所谓
    3、方法定义之后不会马上执行，如果希望执行一定要经过调用
    4、若方法存在返回值，那么必须有return语句，不可以省略
    5、return后面的返回值数据，必须和方法返回值类型相同
    6、对于void返回值类型的方法，不能写return后面的返回值，只能写return自己，来结束函数
    7、对于void返回值方法，return可以省略
    8、若一个方法中有多个return语句，则只会执行一个return，在第一个return就会结束该方法

方法的重载(overload)：多个方法名称相同，但是参数列表不一样
     对于功能类似的方法，却要设立那么多的方法名称
     好处：只需要记住一个方法名称，就可以实现类似的功能

方法的重载特点：
    1、参数的个数不同
    2、参数类型不同
    3、参数的多类型顺序不同
    4、与参数的名称无关
    5、与方法的返回值类型无关

数组：
    数组是一个容器，可以存储多个数据值
    数组的特点：
        1、数组是一种引用数据类型
        2、数组当中的多个数据，数据类型还是统一的
        3、数组的长度在程序运行期间不可改变
    创建数组：
        1、动态初始化(指定长度)   数据类型[] 数组名称 = new 数据类型[数组长度];
        2、静态初始化(指定内容)   数据类型[] 数组名称 = new 数据类型[]{元素一， 元素二， 元素三......}
            静态初始化的格式是可以省略的：
                标准格式：数据类型[] 数组名称 = new 数据类型[]{元素一， 元素二， 元素三......}
                省略格式：数据类型[] 数据名称 = {元素一， 元素二， 元素三......}
             静态初始化虽然没有直接指定长度，但是可以进行推算出数组长度
         使用建议：若不确定数组中的具体内容使用动态初始化，否则，已经确定了具体内容，可以使用静态初始化
     使用数组中的元素：
        1、静态初始化直接打印数组名称，打印出来的是数组内存地址哈希值
        2、访问数组中的元素：
            静态初始化访问数组 数组名称[索引值]
        1、动态初始化访问数组，打印数组名称，打印出来的事数字的内存地址
        2、使用索引值访问时，默认值，整型 0 浮点型 0.0 char /u0000 布尔类型 false 引用类型 null

    java中的内存划分：
         1、栈(stack)：存放的是方法中的局部变量，方法中的东西一定要在栈当中运行
         2、堆(heap)：凡是new出来的东西都在堆当中
         3、方法区(method area)：存放class的相关信息，包括方法的信息
         4、本地方法栈(native method area)：与操作系统有关
         5、寄存器(register)：与CPU有关

    一个数组的内存图：
        int[] array1 = new int[3];
        int[] array2 在栈当中  new int[3] 在堆当中， array2表示的是地址，指向堆中的数组

        int[] array2 = array1; 两个数组指向同一块地址

    数组常见问题：
        在索引值访问数组元素时，索引的编号上并不存在，那么就会发生数组索引的越界，就会抛出越界异常
        所有的引用类型的变量，都可以赋值为null值，但是当时代表其中什么都没有，数组必须进行new初始化以后才能使用其中的元素，若没有赋值
        那么就会发生空指针异常

    获取数组长度：
        格式：数组名称.length 便可返回数组的长度，数组一旦创建，就不可以改变

    遍历数组：
        对数组中的元素逐个进行打印(处理)，迭代器或者增强for循环

    数组作为方法参数进行传递：传入的数组其实就是数组的地址值
        任何类型的数组都可以作为方法的参数进行传递
            public static void arr(int[] array){ 方法体 };

    数组作为返回值
        若希望返回多个结果，那么可以返回一个数组进行实现，返回的数组本质上也返回的是数组的地址



