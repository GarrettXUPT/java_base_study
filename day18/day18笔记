
今日内容：
    1、junit单元测试
        测试：
            1、黑盒测试
                只留有输入和输出，没有将代码显示出来，测试软件性能
                不需要写代码，只需要给输入，看输出内容即可
            2、白盒测试
                白盒除了关注输入和输出以外，还要关注代码本身的性能
                需要写代码，需要关注程序具体的执行流程
        junit的使用(白盒测试)：
            步骤：
                1、定义一个测试类(测试用例)
                    建议：测试类名(被测试类名 + Test)
                         包名：xxx.xxx.xx.test
                2、定义测试方法：可以独立运行
                    建议：方法名：test + 测试的方法名
                         返回值 void
                         参数列表：空参
                3、给方法加注解@Test
                4、导入junit的依赖环境
            判定结果时一般使用Assert断言操作来处理结果
            Assert.assertEquals(期望的结果, 程序运算的结果);
        补充：
            @Before：修饰的方法会在测试方法之前被执行
            @After：修饰的方法会在测试方法之后被执行

    2、反射：框架设计的灵魂
        框架：半成品软件，可以在框架的基础上进行软件的开发，可以简化编码
        反射：将类的各个组成部分封装为其他对象，这就是反射机制
            java代码在计算机中经历的阶段：
                1、写代码后编译为.java文件，形成字节码文件.class,自检码文件的组成：
                    1、成员变量 2、构造方法 3、成员方法
                   源代码阶段(Source)
                2、通过类加载器，可以将.class文件加载到内存当中，在内存中会有一个对象描述字节码文件叫做 类对象包括
                    1、成员变量封装为field数组对象，描述所有的成员变量
                    2、构造方法封装为Constructor对象，描述所有的构造方法
                    3、成员方法Method对象，描述所有的成员方法
                   类对象阶段(Class)
                3、创建对象
                   运行阶段(RunTime)
            反射机制指的是第一阶段到第二阶段的过程
            好处：
                1、可以在程序的运行过程中操作这些对象
                2、可以解耦，减少程序的相关程度，提高程序的可扩展性
            获取Class对象的方式：
                1、.forName("全类名"):将字节码文件加载进内存，返回Class对象
                    多用于配置文件中，将类名定义在配置文件中，读取文件，加载类
                2、类名.class:通过类名的属性class来获取
                    多用于参数的传递
                3、对象.getClass():getClass()方法在Object类中定义
                    多用于对象获取字节码的方式
            上述三个是字符串表现形式一样，同一个字节码文件(.class)在程序的一次运行过程中，只会被加载一次，
            无论通过哪一种方式获取的class都是同一个class对象

            class对象的功能：
                获取功能：
                    1、获取成员变量
                        Field[] getField()  获取所有public修饰的成员变量
                        Field getField(String name)  获取指定名称的public修饰的成员变量
                        Field[] getDeclareFields()  获取所有的成员变量，不考虑公有私有
                        Field getDeclareFields(String name)  获取指定变量名的成员变量
                        对成员变量的操作：
                            1、设置值
                                void set(Object obj, Object value)
                            2、获取值
                                get(Object obj)
                            3、忽略修饰符的安全检查
                                name.setAccessible(true);  // 暴力反射，可更改私有成员变量和私有方法，包括构造函数
                    2、获取构造方法
                        Constructor<?>[] getConstructor()
                        Constructor<T> getConstructors(类<?>...parameterTypes)
                        Constructor<?>[] getDeclareConstructor()
                        Constructor<T> getDeclareConstructors(类<?>...parameterTypes)
                        构造方法的用途：
                            创建对象, 在使用构造器进行对象生成时，也是可以使用强制反射的
                    3、获取成员方法
                        Method[] getMethods()
                        Method getMethod(String name, 类<?>...parameterType)
                        Method[] getDeclareMethods()
                        Method getDeclareMethod(String name, 类<?>...parameterType)
                        Method方法：
                            执行方法 Object invoke(Object obj, Object...args)
                            获取方法名称：String getName()
                    4、获取类名
                        String getName()
            案例：
                需求：写一个框架，可以创建任意类的对象，并执行其中任意方法
                步骤：
                    1、将需要创建的对象全类名和需要执行的方法定义在配置文件中
                    2、在程序中加载读取配置文件
                    3、使用反射技术，加载类文件进内存
                    4、创建对象
                    5、执行方法

    3、注解
        概念：说明程序，是给计算机看的
        注释：使用文字来描述程序，给程序员看的

        概念的描述：JDK1.5之后的新特性 使用来说明程序的
                使用注解：@ + 注解名称
        作用分类：
            编译检查：通过代码中的标识的原数据使编译器可以实现基本的编译检查(Override)
            编写文档：通过代码中标识的注解来生成文档(生成doc文档)
            代码分析：通过代码中标识的注解对代码进行分析(使用反射)

        JDK中定义的一些注解
            @Override：用来检测被该注解标注的方法，是否是继承自父类
            @Deprecated：将该注解标注的内容已过时
            @SuppressWarnings：压制警告      @SuppressWarnings("all")  // 压制所有的警告，一般传递的都是all

        自定义注解
            格式：
                1、元注解
                public @interface 注解名称{}
            本质：注解本质就是一个接口，该接口默认继承Annotation接口
                public interface MyAnno extends java.lang.annotation.Annotation
            属性：接口中的抽象方法
                要求：
                    1、属性的返回值类型，其他类型都不可以
                        基本数据类型 String 枚举 注解 以上类型的数组
                    2、定义属性，在使用时，要对属性赋值
                        若在定义属性时，使用default进行注释 就可以使用默认值
                        若只有一个属性可以赋值，并且属性的名称是value，则可以直接定义值
                元注解：是用来描述注解的注解
                    @Target 描述了注解可以作用的位置
                        @Target(value = {ElementType.TYPE})
                        ElementType取值：
                            Type：可以作用在类上
                            HETHOD: 可以作用在方法上
                            FIELD：作用于成员变量上
                    @Retention 描述注解可以被保留的阶段
                         @Retention(RetentionPolicy.RUNTIME)   // 作用至RUNTIME阶段
                         表示当前注解被描述的注解会保留到字节码文件中并被JVM读取到
                    @Documented 描述注解是否抽取到api
                        表示这些加了注解的这些信息会被提取到java的文档中
                    @Inherited 描述注解是否被子类继承

        在程序中使用注解：获取注解定义中的属性值
            1、获取主食定义的位置的对象 (Class Field Method)
            2、获取指定的注解
                getAnnotation(Class)
            3、调用抽象方法获取配置的属性值

























