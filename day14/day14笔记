
IO概述：
    内存：临时存储数据
    input:输入、读入，将硬盘中的数据读入到内存中进行使用
    output:输出，写入，将内存中的数据写入到硬盘中进行保存

字节流：
    电脑中存储的任何资源都是以字节为单位的，所以在传输时，就是以字节为单位的

    字节输出流：
        java.io.OutputStream，该抽象类是输出字节流所有类的超类
        定义一些子类共性的方法
        public void close()  关闭此输出，且释放一切与之相关的任何系统资源
        public void flush()  刷新输出流，并强制任何缓冲区的输出字节写出
        public void write(byte[] b) 将b.length字节从指定字节数组写入该输出流
            一次性写入多个字节：若写入的字节是正数那么查询的就是ASCII码表
            若写入的第一个字节是负数，那第一个字节和第二个字节会组成一个中文显示，查询系统默认码表
        public void write(byte[] b, int off, int len) 将指定的字节数组进行写入len字节，从偏移量off开始输出到此输出流
            写入的是字节数组的一部分，将字节数组中的一部分写入到文件中
            参数：int off 数组的开始索引
                 int len 写几个字节
        在写入时，还可以使用字符串方法，将字符串转换为字节数 Byte[] getBytes() 将字符串转化为字节数

        java.io FileOutputStream extends OutputStream
        FileOutputStream:文件字节输出流
        作用：将内存中的数据写入文件中
        构造方法：
            FileOutputStream(String name)  创建一个具有指定名称的文件写入数据的输出文件流
            参数：Stream name:目的地是一个文件的路径
            FileOutputStream(File file)
            创建一个向指定File对象表示的文件中写入数据的文件输出流
            参数：File file:目的地表示一个文件
        构造方法的作用：
            1、创建一个FileOutputStream对象
            2、会根据构造方法中传递的文件/文件路径创建一个空的文件
            3、会将FileOutputStream对象指向创建好的文件

    写入数据的原理：
        java程序找到JVM，JVM找到操作系统，操作系统再调用写数据的方法，将数据写入到文件中
    字节输出流的使用步骤：
        1、创建一个FileOutputStream对象，构造方法中传递使用方法的目的地
        2、调用FileOutputStream对象中的write方法，将数据写入文件中
        3、释放资源(流会占用内存，清空流会提高程序的效率)

    数据的追加写和换行写
        追加写：使用两个参数的构造方法
            FileOutputStream(String name, boolean append)
            FileOutputStream(File file, boolean append)
            参数：boolean append：
                true创建对象，不会覆盖源文件，而是在文件的末尾进行追加写数据
                false创建新文件，覆盖源文件
        换行写：
            windows：\r\n
            Linux：\n
            MAC: \r

    字节输入流(InputStream)：
        java.io.InputStream 所有字节输入流的超类
        int read() 从输入流中一次读取一个字节，若读取到末尾，则返回到-1
        int read(byte[] b) 一次读取多个字节
            byte[] b的作用，起到缓冲作用，可以存储每次读取到的多个字节，字节数组的长度一般定义为1024，或者是1024的整数倍
            方法的返回值int, 指的是读取到有效字节数
            使用String类的构造方法：String(byte[] b)将字节数组，转化为字符串
            String(byte[] bytes, int offset, int length)将字节数组的一部分转化为字符串,offset表示的是开始的索引，length转换的字节个数
        void close() 关闭输入流并释放资源

        java.io.FileInputStream extend InputStream
        FileInputStream:文件字节输入流 作用：将文件内存中的数据读取到内存中使用
        构造方法：
            FileInputStream(String name)
            FileInputStream(File file)
            参数：读取文件数据的数据源
                String name 文件的路径
                File file 文件对象
        构造方法的作用：
            1、创建一个FileInputStream对象
            2、将FileInputStream对象指定构造方法中要读取的文件

        读取数据的原理：
            java找JVM，JVM找OS，OS找读取数据的方法，读取文件
        字节输入流的使用步骤：
            1、创建FileInputStream对象，构造方法中绑定要读取的数据源
            2、使用FileInputStream对象的read读取文件
            3、释放流的资源
    字符流读取中文时的问题：
        一个中文：GBK占用一个字节 UTF-8占用三个字节
        可以使用自带的字符流进行解决
        字节输入流：Reader
        java.uo.Reader最顶层的父类，定义了很多共性的成员方法，它是一个抽象类
            int read() 读取单个字符并返回
            int reader(char[], cbuf) 一次读取多个字符，将字符放置在数组中
            void close() 释放资源
        FileReader用于读取文件的便捷类
        java.io.FileReader extends InputStreamReader extends Reader
        FileReader：文件字符输入流，作用是：将文件当中的数据以字符的方式读取到内存中
        构造方法：
            FileReader(String name)
            FileReader(File file)
            参数：读取文件的数据源
                String name表示文件的路径
                File file 表示文件对象
        构造方法的作用：
            1、创建一个FileReader对象
            2、将FileReader对象，指向要读取的文件
        字符输入流的使用步骤：
            1、创建一个FileReader对象，构造方法中绑定要读取的数据源
            2、使用FileReader对象的read方法，使其读取文件
            3、释放资源

    字符输出流：
        java.io.Writer:字符输出流，是所有字符输出流的最顶层的父类，是一个抽象类，定义了共性的成员方法：
            void write() 写入单个字符
            void write(char[] cbuf)写入字符数组
            abstract void write(char cbuf, int off, int len) 写入字符数组的某一部分，off指的是字符数组开始的索引，len写入字符的个数
            void write(String str) 写入字符串
            void write(String str, int off, int len) 写入字符串的某一个部分
            void flush() 刷新该流的缓冲
            void close() 关闭流，释放资源，先刷新它
        java.io.FileWriter extends OutputStreamWriter extends Writer
        FileWriter:文件字符输出流，作用是将内存中字符数据写入到内存中
        构造方法：
            FileWriter(File file) 根据传入的对象构造一个FileWriter的目的地
            FileWriter(String filename) 根据给定的文件名构造的一个FileWriter对象
            参数：写入数据的目的地址
            String filename 文件的路径
            File file 就是一个文件
        构造方法的作用：
            1、创建一个FileWriter对象
            2、要根据构造方法中传递文件/文件夹的路径
        字符串输出流的使用步骤：
            1、创建FileWriter对象，构造方法中要绑定写入数据的目的地
            2、使用FileWriter对象中的方法write,将数据写入到内存缓冲区中(字符转换为字节的过程)
            3、使用FileWriter对象中的方法flush，将内存缓冲区中的数据刷新到文件中
            4、释放资源(会将内存缓冲区中的内容刷新到文件中)
        close方法和flush方法的区别：
            flush方法，刷新缓冲区，该对象可以继续使用
            close方法，先刷新缓冲区，然后通知系统释放资源，该对象不可以再被使用

    字符流的续写和换行，方式与字节流是一模一样的

对IO异常的处理：
     使用throws 或者是 try...catch
     重点是使用try...catch捕获异常

JDK7的特性，在try的后面加一个()，括号中可以定义流对象，那么流对象的作用域就只在try中有效，try代码执行完毕可以自动释放流对象
           不需要使用finally
           格式：
            try(定义流对象；定义流对象){
                可能出现异常的代码
            }catch(异常类对象 异常变量名){
                异常的处理
            }












