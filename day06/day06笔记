
接口：
    接口就是一种公共的标准规范，只要符合标准，就可以通用
    接口是多个类的公共规范，接口是一种引用的数据类型，最重要的内容就是抽象方法
    格式：public interface 接口名称{
        // 接口的内容
    }
    备注：换成关键字interface以后，生成的自检码文件仍然是.Class
    接口中包含的内容：
        1、常量 2、抽象方法 3、默认方法 4、静态方法 5、私有方法

    注意事项：
        1、接口当中的抽象方法，关键字必须是 public abstract 返回值类型 方法名称(参数列表)；
        2、这两个关键字，可以选择性的省略
        3、方法的三要素可以随意定义

    接口的使用步骤：
        1、接口不能直接使用，必须有一个实现类来实现该接口
            格式：public class 实现类名称 implement 接口名称{
                ......
            }ALT + Enter为创建所有抽象方法的关键字
        2、接口中实现类必须全部重写接口中所有的抽象方法
        3、创建实现类的对象，可以使用
        注意事项：若实现类中并没有全部重写接口中的抽象方法，那么这个实现类就必须是抽象类

    接口中的默认方法：
        格式：public default 返回值类型 方法名称(参数列表){
            方法体;
        }
        备注：接口当中的默认方法可以解决接口升级的问题
            1、接口的默认方法可以通过实现类对象，直接调用
            2、接口的默认方法也可以由实现类进行覆盖重写

    接口当中的静态方法：
       格式：public static 返回值类型 方法名称(参数列表){
            // 方法体;
       }
       提示：就是abstract或者default换为static即可，再带上方法体
       1、不可以使用接口实现类对象来调用接口类的静态方法
       2、通过接口名称直接调用静态方法 接口名称.静态方法名()

    接口当中的私有方法：
       当使用公共方法提取重用部分以后，会增加接口中的公共方法数量，这样会影响到实现类，所以需要将公共方法进行私有
       解决方法：
        1、普通私有方法：解决多个方法之间重复代码问题
        2、静态私有方法：解决多个静态方法之间重复代码问题
        格式：
           private 返回值类型 方法名称(参数列表){
                方法体
           }
           private static 返回值类型 静态方法名称(参数列表){
                方法体
           }

    接口的常量定义：
        接口当中也可以定义成员变量，但是该成员变量必须使用public static final关键字进行修饰，从效果上看，这就是接口的常量
        格式：
            public static final 数据类型 常量名称  = 数据值
        一旦使用final进行修饰，说明不可变，三个关键字是可以省略的，但是现在不推介省略

        注意事项：
            1、接口当中的常量可以省略那三个关键字，不写功能照样是这样
            2、接口当中的常量必须进行赋值

    使用接口的注意事项：
        1、接口没有构造方法和静态代码块的
        2、一个子类的父类是唯一的，但是一个类可以同时实现多个接口 public class MyInterface implement MyInterfaceA, MyInterfaceB
        3、如果是多个接口中具有重复的抽象方法，那么只需要覆盖重写一次即可
        4、若实现类中没有覆盖重写所有的抽象方法，那么该实现类就是一个抽象类
        5、如果实现类实现的多个接口中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行重写
        6、一个类若直接父类和接口中的默认方法，发生了冲突，会优先使用父类的方法


    接口之间的多继承：
        格式：public interface MyInterface extends MyInterfaceA, MyInterfaceB{
            ......
        }
        注意事项：
            1、多个父接口的抽象方法重复是没有关系的
            2、多个父接口的默认方法如果重复，那么子接口必须对默认方法进行覆盖重写，并带上default关键字

多态：
    面向对象的三大特征：
             1、封装：就是将一些细节信息隐藏起来，对于外界不可见
                 封装在java中的体现：
                     1、方法就是一种封装
                     2、关键字private也是一种封装.
                 private:一旦 使用private进行修饰，本类之中任然可以随意访问，但是出了本类范围之外就不可以进行访问了
                     间接访问private就是定义一对setter和getter方法，必须叫做setxxx：不能有返回值，参数类型与成员变量对应和getxxx:不能有参数，返回类型与成员变量对应
                     当成员变量和参数重名时，根据就近原则，会优先使用参数
                     当需要访问本类中的成员变量时可以使用this.成员变量；通过谁调用的方法，谁就是this
             2、继承
                继承是多态的前提，没有继承就没有多态，继承解决的主要的问题：共性抽取
                父类：基类，超类
                子类：派生类
                继承关系中的特点：
                    1、子类可以拥有父类的内容
                    2、子类还可以拥有自己专有的新内容
             3、多态
                代码当中体现多态性，就是父类引用指向子类对象
                格式：
                    父类名称 对象名 = new 子类名称();
                    接口名称 对象名 = new 实现类名称();
                    右侧子类对象被当做父类进行使用

    多态中成员变量的使用特点：
        访问成员变量的两种方式：
            1、直接通过对象名称进行访问，看等号左边是谁，就优先用谁，没有则向上找
            2、间接通过成员方法进行访问，看该方法属于谁就优先用谁，没有则向上找

    多态中的成员方法访问特点：
        访问成员方法的规则是：
            看new的是谁，就优先用谁，没有则向上找

    使用多态的好处：
        无论右边时候new的是哪一个子类对象，等号左边的调用方式多不会发生改变

    对象的向上转型：
        对象的向上转型其实就是多态写法 父类名称 对象名 = new 子类名称(); 创建一个子类对象，把它作为父类对象进行使用
        注意事项：向上转型一定是安全的
        类似于 double num = 100; 将int转为double一定是安全的，小范围内容被转化为大范围类型一定是安全的
        一旦缺点：一旦向上转型为父类，就无法调用子类原本特有的方法，解决方案：对象的向下转型

    对象的向下转型：
        对象的向下转型，其实是一个还原动作
        格式：子类名称 对象名 = (子类名称) 父类对象 将父类对象还原为本来的子类对象

    如何知道父类引用的对象本来是什么子类？
        格式：对象 instanceof 类型 将得到一个布尔值，也就是判断

final关键字：
    代表最终的不可改变的，常见四种用法：
    1、可以修饰一个类
        格式: public final class 类名称{
            .....
        }
        含义：当修饰一个类时，该类不能有子类
        一个类为final类，其中所有的方法都不能进行覆盖重写，因为没有子类

    2、可以修饰一个方法
        当final修饰一个方法时，该方法就是最终方法，是不能被覆盖重写的
        格式：修饰符 final 返回值类型 方法名称(参数列表){
            方法体
        }
        对于类、方法来说，abstract关键字和final关键字不能同时使用

    3、还可以修饰一个局部变量
        一旦使用final来修饰该关键字，那么该变量在其他地方是不可变的
        对于基本类型来说，不可变说的是变量当中的数值不能改变，对于引用类型来说，不可变说的是引用类型地址值不可变

    4、也可以修饰一个成员变量
        一旦使用final关键字修饰，那么这个变量的值也是在其他地方不可修改的
        1、由于成员变量具有默认值，所以用了final之后要进行手动赋值
        2、对于final的成员变量，要么直接复制，要么通过构造方法进行赋值
        3、必须保证类当中所有的重载方法都会对final修饰变量进行赋值




