
Random类：产生随机数字
    1、导包
        import java.util.Random;
    2、创建
        Random r = new Random();小括号中留空即可
    3、使用
        获取一个Int的随机数
            int m = r.nextInt();  (范围是Int的取值范围，有正有负)
        获取一个指定范围的随机数，范围为左闭右开区间
                int m1 = r.nextInt(10); 范围为0-9的整数

对象数组：
    数组有一个缺点，一旦被创建，在程序运行期间，长度是不可变的
    ArrayList集合的长度是可以改变的，ArrayList<E>中E所代表的就是这个类中数据的类型，该类型只能是引用类型而不能是基本类型
    ArrayList<String> list = new ArrayList<>(); 创建一个名为list的集合，里面的数据都是String
    // 从jdk1.7+ 右侧的尖括号可以不写类型
    注意事项：
        对于ArrayList来说，直接打印出来的不是地址值，而是集合中的内容，若内容是空，则得到的是空的中括号[]
    ArrayList常用方法：
        1、添加 public boolean add(E e)
        2、根据索引值从集合中获取元素 public E get(int index)，返回值就是对应的元素
        3、根据删除元素 public E remove(int index)，返回值就是删除掉的元素
        4、获取集合的长度  public int size();返回值是当前集合中元素的个数
    ArrayList存储基本数据类型元素：
        希望向集合中存储基本类型 必须使用基本类型的包装类
        基本类型 包装类 在java.lang包下,所以并不需要进行导包
        byte Byte | short Short | int Integer | long Long | float Float | double Double | char Character | boolean Boolean
        由JDK1.5开始，数据自动转化为包装类型，即自动装箱(基本类型 - 包装类型)，自动拆箱(包装类型 - 基本类型)

字符串概述：
    程序当中所有双引号括起来的字符，都是字符串类型
    特点：
        1、字符串一旦被创建，字符串的内容永不可变
        2、字符串不可以改变，所以字符串可以共享使用
        3、字符串的效果就相当于char型的数组，但是底层原理是byte[]字节数组
    字符串的创建：
        1、public String() 创建一个空白字符串，不含有任何内容
        2、public String(char[] Array), 根据字符数组的内容，来创建对应的字符串
        3、public String(byte[] Array), 根据字节数组的内容，来创建对应的字符串
        4、直接写上双引号，就是表示字符串对象
    字符串的常量池：
        程序中，直接写上的双引号字符串，就在字符串常量池中。
        对于基本类型 == 是针对于数值的比较，但是对于引用类型来说 == 是针对于地址值的比较
        直接写上双引号创建的才在常量池中，但是new创建的不在常量池中，new创建的是在堆当中
    字符串的比较相关方法：
         public boolean equals(Object obj)参数可以是任何对象，参数是一个相同的字符串时才会返回true，否则返回false
         注意事项：
            1、任何对象都可以使用Object，进行结收
            2、equals方法具有对称性，也就是a.equals(b)和b.equals(a)效果是相同的
            3、若双方一个变量一个常量，通常将变量放在前面
        public boolean equalsIgnoreCase(String str),忽略大小写，进行内容比较
        注意除了英文字母，其他都不区分大小写
    字符串获取的方法：
        public int length(), 获取字符串的长度
        public String concat(String str),将当前字符串和参数字符串拼接成为新的字符串，返回值为新的字符串
        public char charAt(int index) 获取字符串中指定索引位置的单个字符
        public int indexOf(String str) 查找参数字符串在本字符串中首次出现的索引位置，若没有，则返回-1
    字符串的截取方法：
        public String subSting(int index),从参数位置一直到字符串末尾进行截取，返回新的字符串
        public String subString(int begin, int end); 由开始索引值一直截取到结束索引值位置前，范围为左闭右开区间，返回新的字符串
    字符串转换相关方法：
        public char[] tocharArray()当前字符串拆分成为字符数组作为返回值
        public byte[] getBytes() 获取当前字符串底层的字节数据
        public String replace(charSequence oldString, charSequence newString) 将所有出现的老字符串替换成为新的样子，返回替换过后的字符串
    字符串的分割方法：
        public String[] split(String regex) 按照参数规则将字符串切分成为若干部分,split方法其实是一个正则表达式
        String str = "aaa, bbb, ccc";
        String[] array = str.split(",");
        result is aaa bbb ccc
        注意：
            若要按照英文句号.进行切分，必须写为//.，因为引文句号为转义字符

static关键字：
    基本含义：一旦使用static关键字，那么该方法不再只属于该对象，而是属于同一类的，凡是该类的对象，都共享该内容
    修饰变量：
        若一个成员变量使用了static关键字，那么该成员变量不再只属于对象自己，而是属于所在的类，多个对象共享同一个数据
    修饰方法：
        若方法使用static关键字进行修饰，那么就不只属于对象，而是属于整个类
        若没有static关键字进行修饰，那么必须通过对象才能够使用它
        由static关键字修饰以后，可以通过类名称进行调用
    注意事项：
        1、无论是成员变量还是成员方法凡是使用static进行修饰的，都推介使用类名称进行调用 类名称.静态成员变量 类名称.静态方法
        2、静态只能直接访问静态，非静态只能直接访问非静态，静态不能直接访问非静态，因为内存中静态先被创建，"先被创建不知道后背创建的，单数 后被创建的直到前面被创建的"
        3、静态方法中不能使用this关键字
        4、通过类名称访问静态变量的时候，全程就和对象没有关系
    静态代码块：
        static{
            静态代码块的内容;
        }
        特点：
            1、当第一次用到本类的时候，静态代码块执行唯一的一次
            2、静态内容总是优先被创建，所以静态代码块总是比构造方法先执行
            3、典型用途：一次性的为静态变量进行赋值

Arrays工具类：
    是一个与数组相关的工具类，用来执行常见的与数组相关的操作
    import java.utils.Arrays
    public static String toString(数组)，将参数数组变为字符串格式(按照默认格式，[元素1，元素2....])
    public static void sort(数组)，以默认升序，对数组的元素进行排序
        如果是数值，则就按照数值升序，若是字符串，那么就按照字母升序
        若是自定义的类，需要有comparable或者comparator接口的支持

Math类：
     java.utils.Math 类中，提供了大量的静态方法，完成与数学相关的操作
     public static double abs(double num)  求其绝对值
     public static double ceil(double num) 向上取整
     public static double floor(double num) 向下取整
     public static long round(double num) 四舍五入

继承：
    面向对象的三大特征：
         1、封装：就是将一些细节信息隐藏起来，对于外界不可见
             封装在java中的体现：
                 1、方法就是一种封装
                 2、关键字private也是一种封装.
             private:一旦 使用private进行修饰，本类之中任然可以随意访问，但是出了本类范围之外就不可以进行访问了
                 间接访问private就是定义一对setter和getter方法，必须叫做setxxx：不能有返回值，参数类型与成员变量对应和getxxx:不能有参数，返回类型与成员变量对应
                 当成员变量和参数重名时，根据就近原则，会优先使用参数
                 当需要访问本类中的成员变量时可以使用this.成员变量；通过谁调用的方法，谁就是this
         2、继承
            继承是多态的前提，没有继承就没有多态，继承解决的主要的问题：共性抽取
            父类：基类，超类
            子类：派生类
            继承关系中的特点：
                1、子类可以拥有父类的内容
                2、子类还可以拥有自己专有的新内容
         3、多态

        继承的格式：
            在继承关系中，子类就是一个“父类”
            定义父类的格式：(一个普通类的定义)
            public class 类名称(){
                ......
            }
            定义子类的格式：
             public class 子类名称 extends 父类名称{
                ......
             }
        在继承关系当中，如果成员变量重名，则创建子对象时，访问的两种方式：
            1、直接通过子类访问成员变量，若子类没有则使用父类的，若子类有，就是用子类的，若双方都没有，则报错
            2、间接通过成员方法访问成员变量，该方法属于谁，就有先使用谁，没有则向上找
        区分子类方法中重名的三种方式：
            局部变量：直接写变量名
            本类变量：this.成员变量名
            父类变量：super.成员变量
        在继承关系中，创建子类对象。访问成员方法的规则
            创建对象是谁，就优先使用谁，没有才会向上找
            注意事项：无论是成员方法还是成员变量如果没有都是向上找，绝对不会向下找子类的
        在继承关系中的方法重写(override)：方法的名称一样，参数列表也是一样
                     方法重载(overload)：方法的名称一样，但是参数列表不一样
                     方法重写的特点：创建的是子类对象，就优先使用子类的方法
                     注意事项：
                        1、必须保证父子类方法的名称相同，参数列表也相同 @override写在方法的前面，用来检测是否有正确的重写
                        2、子类方法的返回值范围必须小于等于父类方法的返回值范围(这里指的是类的范围)，Object是公共的最高父类(祖宗类)
                        3、子类方法的权限必须大于等于父类方法的修饰符
        继承关系中的构造方法：
            1、在子类构造方法中有一个默认隐含的super()调用，先调用的父类构造，再调用子类构造
            2、可以通过super关键字来用子类构造调用父类构造
            3、super()父类构造调用，必须是子类构造函数的第一语句，不能一个子类构造调用多次super构造，super必须是该方法的第一句，否则就会报错
        super关键字的用法：
            1、在子类的成员方法中，访问父类的成员变量 super.成员变量
            2、在子类的成员方法中，访问父类的成员方法 super.成员方法
            3、在子类的构造方法中，访问父类的构造方法 super()
        this关键字的用法：
            1、在本类的成员方法中，访问本类的成员变量
            2、噪本类的成员方法中，访问本类的另一个成员方法
            3、在本类的构造方法中，访问本类的另一个构造方法
            4、this(....)也必须是构造方法的第一个语句
            5、super和this不可以同时调用，因为不存在两个第一个语句在构造方法中
        java中与继承相关的重要特征：
            1、java是单继承的，一个子类的直接父类只能有一个
            2、java可以多级继承
            3、一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类

抽象：
    若父类中的一些方法，还不确定如何进行实现，那么就是一个抽象方法
    定义格式：
        抽象方法：去掉大括号直接使用分号结束 public abstract void 抽象方法名()
        抽象类：public abstract class 抽象类名称
        抽象方法所在的类必须是抽象类
    如何使用：
        1、不能直接建立抽象类对象
        2、必须使用一个子类来继承抽象父类，才能使用
        3、子类必须覆盖重写抽象类中，所有的抽象方法
        4、创建子类对象进行使用
    注意事项：
        1、抽象类不能直接创建对象，否则就会报错
        2、抽象类中是可以有构造方法的，只不过是子类的构造方法中进行super调用的，给抽象父类的成员变量进行初始化
        3、抽象类中不一定要包含抽象方法，但是抽象方法的类必须是抽象类中的
        4、抽象类的子类，必须覆盖重写所有的构造方法，否则报错，除非子类也是一个抽象类







