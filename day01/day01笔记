
关键字特点：
    1、完全小写的字母
    2、在编译器中具有特殊颜色的就是关键字

标识符要求：
    标识符不可以数字开头，标识符不可以是关键字
    命名规范：
        1、类名命名：首字母大写，后面每个单词首字母都要大写
        2、变量名命名规范：首字母小写，后每个单词首字母大写
        3、方法名命名方式与变量相同

常量：在运行期间，不会发生改变的
    常量的分类：
        1、字符串常量：凡是使用双引号引起来的就是字符串常量
        2、整形常量：直接写上数字，没有小数点
        3、浮点数常量：直接写上的数字，但是有小数点
        4、字符常量：使用单引号引起来的就是字符常量，单引号中只能有一个字符
        5、布尔常量：true false
        6、空常量：null 代表没有数据

数据类型：
    基本数据类型：整数型：byte(-128--127) short int long
                 浮点型：float(4个字节) double(8个字节)
                 字符型：char(2个字节)
                 布尔型：boolean(一个字节)

    引用数据类型：字符串、数组、类、lambda

    注意事项：
        1、字符串不是基本类型，而是引用类型
        2、浮点型只是近似，而不是精确值
        3、数据范围与字节数不一定相关，字节数使用的越多，表示的范围不一定越大
        4、浮点数默认类型时double，若使用单精度则后缀F
        5、整型默认类型为int，若使用long则后缀L


变量：可以视为一个容器，创建一个变量，并使用的格式：
    数据类型 变量名称; 创建了一个变量
    变量名称 = 数据值
    一步到位  数据类型 变量名称 = 数据值

    变量的注意事项：
        1、若创建多个变量，变量名不能重复
        2、对于float和long 后缀不能丢掉
        3、右侧的数据值一定要在左侧的数据类型的范围之内
        4、变量要先赋值，才能够使用
        5、变量的使用不能超出作用域范围
        6、可以通过一个语句来创建多个变量

数据类型转换：
    1、自动转换：代码不需要进行特殊处理字节进行转换
    2、规则：数据范围由小到大，发生自动类型转换
    3、强制转换：代码需要特殊处理 范围小的变量名 = (范围小的范围)原本范围大的数据
    4、注意事项：
        强制类型转换要谨慎使用，小心出现数据的丢失，小数转换为整数时，会直接舍弃全部小数位，而不是做四舍五入
        byte/short/char 这三种都可以进行数学运算,都要先转化为int类型，然后再进行运算，输出的数据类型都是int
        数字与字符的对照表：ASCII码 unicode码(开头0 - 127与ASCII码完全一样) '0' - 48 'A' - 65 'a' - 97

运算符：进行特定操作的符号
表达式：使用运算符连接起来的叫做表达式
    加号的多种应用：
        1、对于数值来说，就是加法
        2、对于char类型，在计算之前被提升为int类型，再进行运算
        3、对于字符串string来说，加号表示的是字符串的拼接,任何类型与字符串进行加法运算都会被先转化为字符串
           所以可使用与空字符串相加来将数据类型转化为字符串类型
    自增自减运算符：
        1、在单独使用时 i++ 与 ++i是完全一样的
        2、若是在混合使用时：++i 表示变量马上加一，然后再参与后续运算，i++表示先参与运算，再加一
    赋值运算符：
        基本运算符： =
        复合运算符：a += 1 , a = a + 1,其他的运算符一次类推
        注意事项：
            1、只有变量才可以使用赋值运算符，常量是不支持的
            2、强制类型转换其中隐含了一个强制类型转换
        逻辑运算符：
            &&(与)  ||(或)  ！(非)

        三运运算符：
            数据类型 变量名称 = 条件判断 ？表达式A : 表达式B;
            首先判断是否成立，若条件成立，则将表达式A赋值给变量，否则将表达式B赋值给变量

方法：
    定义一个方法的格式：
        public static void 方法名称(){
            方法体
        }
    方法的命名规则和变量的命名规则是相同的，方法体中可以包含任意条语句。
    注意事项：
        1、方法定义先后顺序无所谓
        2、方法的定义无法进行嵌套
        3、方法定义好后，需要调用才能执行
    如何调用方法：
        方法名称();

编译器的优化：
    1、对于byte/short/int三种类型来说，若右侧的数据没有超出左侧类型表示范围，那么编译器会自动隐含的进行强制类型转化，将右侧数据转为左侧数据类型
    2、若右侧超出左侧范围，则会进行报错
    3、当等号右端都是常量而没有变量时，编译之后与第一种情况一致
    4、若表达式中有变量参与就不能进行这种优化了，即右侧有变量参与，就无法进行自动类型转换


判断语句：
    单if语句：
        if(关系表达式){
            语句体;
        }
    标准if-else语句
        if(关系表达式):{
            语句体1;
        }else{
            语句体2;
        }
    扩展if-else if -else语句
        if(关系表达式1){
            语句体1;
        }else if(关系表达式2){
            语句体2;
        }else{
            语句体3;
        }

选择语句：
    switch(表达式){
        case 常量值:
            语句体1;
            break;
        case 常量值:
            语句体2;
            break;
            ......
        default:
            语句体n + 1;
            break;
    }
    注意事项：
        1、多个case后面的数字不可以重复
        2、switch后面的小括号只能是下列的数据类型，只能是byte/short/int/char/String/enum
        3、switch语句格式十分灵活，前后顺序可以颠倒，而且break语句是可以省略的,但是省略以后，还会执行接下来的一个case

