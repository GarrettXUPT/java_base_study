
Lambda表达式：
    面型对象的思想：做一件事情，找一个能解决该问题的对象，调用对象的方法解决问题
    函数式编程思想：只要获取结果，谁去做，怎么做都不重要，重视的是结果，不重视过程

匿名内部类的好处与弊端：
    好处：省去实现类的定义
    弊端：匿名类的语法太复杂

Lambda的标准格式：
    1、一些参数 2、一个箭头 3、一段代码
    格式：
        (参数列表)->{一些重写方法的代码}
    说明格式：
        ():接口中抽象方法的抽象列表，没有参数则为空，多个参数要逗号进行分割
        ->:传递的意思，将参数传递给方法体
        {}:重写接口的抽象方法的方法体

Lambda表达式是可推导，可省略的
    凡是根据上下文推导出来内容，都可以省略书写
    可以省略的内容：
        1、(参数列表):括号中参数列表的数据类型可以省略
        2、(参数列表):括号中的参数若只有一个，那么类型和括号都可以省略不写
        3、{一些代码}:括号中的代码只有一行，无论是否有返回值，都可以省略({}, return，分号)，要省略这些要素必须一起省略

Lambda表达式适用的前提：
    1、使用lambda必须使用一个接口，且要求接口中只有一个抽象方法
    2、使用lambda必须具有"上下文推断"，也就是方法的参数或局部变量必须为lambda对应的接口类型，才能使用lambda作为接口的实例

File类：文件操作类
       java.io.File类
       文件和目录名的抽象表示形式，java将电脑中的文件和文件夹(目录)封装成为File类，我们可以使用File和File类对文件和文件夹进行操作
       使用File类的方法创建、删除、获取、判断文件或者文件夹，还可以对文件夹进行遍历，获取文件的大小
       File类是一个与系统无关的类，任何操作系统都可以使用File中的方法
       重点：
        file directory path
       File类中的静态成员变量
        pathSeparator路径分隔符

        绝对路径：是一个完整的路径，是以盘符开始的路径
        相对路径：是一个简化的路径，是一个相对于当前项目的根目录
        若使用当前目录的根目录，那么路径可以简化书写，其中在表示路径时要注意转移字符的使用

        File类的常用方法：
             获取功能的方法：
                public String getAbsolutePath()  // 返回File类的绝对路径字符串
                public String getPath()  将File类转化为路径字符串
                public String getName()  返回由File表示的文件或者目录名称
                public long length()  返回由File表示的文件的长度，获取的是文件的大小
             判断功能的方法：
                public boolean exits()  // 判断构造方法中的路径是否存在
                public boolean isDirectory()  // 判断File表示的是否为目录
                public boolean isFile()  // 判断File表示的是否为文件
             创建删除功能的方法：
                public boolean creatNewFile()  // 当具有该名称的文件还不存在是，自动创建该文件
                public boolean delete()  // 删除由File表示的文件或者目录，该方法删除就是直接删除，是不走回收站的
                public boolean mkdir() // 创建由此File表示的目录
                public boolean mkdirs()  // 创建File表示的目录，包括必须但不存在的父目录
             目录的遍历功能：
                public String[] list() 返回一个String的数组，表示File目录中所有的子文件或者是目录
                public File[] listFiles() 返回一个File类数组，表示File目录下所有的子文件或者是目录

递归：
    直接递归：方法自身调用自身
    间接递归：A方法调用B方法，B方法调用C方法，C方法调用A方法
    注意事项：
        1、递归一定要有条件限制，保证该操作是有限次的递归，否则会发生栈内存溢出
        2、虽然递归中有条件限定，但是递归的次数不可太多
        3、构造方法，禁止递归
    递归的使用场景：
        当调用方法的时候，方法的主题不变，但是每次使用的参数不同，可以使用递归
        注意：
            当一个方法调用其他方法时，被调用的方法没有执行完毕，当前方法就会一直等待调用方法执行完毕，才会继续执行
    File类中有两个listFiles重载的方法，方法的参数传递的就是过滤器
    java.io.FileFilter 接口，用于抽象路径名(File对象)的过滤器
        作用：用来过滤文件(File对象)
        抽象方法：boolean accept(File pathname)  测试指定抽象路径名是否应该包含在某个路径列表当中
        参数：File pathname 实际上就是使用ListFiles方法，遍历目录，得到的每一个文件
    File[] listFiles(FilenameFilter filter)
    java.io.FilenameFilter,接口：实现此接口的类示例可作为文件名称过滤器
    作用：可以过滤文件名称
    抽象方法：
        boolean accept(File dir, String name)
        参数：File dir:构造方法中传递的被遍历的目录
             String name:使用ListFiles方法遍历目录，得到的每个文件/文件夹的名称
    注意：两个过滤器是没有实现类的，需要我们自己写实现类，然后，重写accept方法，自己定义过滤的规则





















